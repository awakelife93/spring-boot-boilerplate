plugins {
  id 'java'
  id 'org.springframework.boot' version '3.1.4'
  id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
  sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
  mavenCentral()
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'

  // lombok
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  // security
  implementation 'org.springframework.boot:spring-boot-starter-security'

  // batch
  implementation 'org.springframework.boot:spring-boot-starter-batch'

  // devtools
  developmentOnly 'org.springframework.boot:spring-boot-devtools'

  // jpa
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

  // querydsl
  implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
  annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
  annotationProcessor "jakarta.annotation:jakarta.annotation-api"
  annotationProcessor "jakarta.persistence:jakarta.persistence-api"

  // validation
  implementation 'org.springframework.boot:spring-boot-starter-validation'

  // postgresql
  implementation 'org.postgresql:postgresql'

  // jwt
  implementation 'io.jsonwebtoken:jjwt:0.9.1'
  implementation 'com.sun.xml.bind:jaxb-impl:4.0.1'
  implementation 'com.sun.xml.bind:jaxb-core:4.0.1'
  implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'

  // redis
  implementation 'org.springframework.boot:spring-boot-starter-data-redis'

  // swagger
  implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

  // for apple chip
  implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64'

  // test
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation 'org.springframework.batch:spring-batch-test'
  testImplementation 'org.instancio:instancio-junit:4.5.1'
  testRuntimeOnly "com.h2database:h2"
}

tasks.named('test') {
  useJUnitPlatform()
}

def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
  main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
  options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
  file(querydslDir).deleteDir()
}
